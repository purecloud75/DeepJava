public class AboutCF {
}

/*
어플리케이션 개발하다보면 다수의 객체들을 저장해 두고 필요할 때마다 까내서 사용하는 경우가 많다. 거기서 객체를 효율적으로 추가, 검색, 삭제
해야할지 고민이 되는데 가장 간단한 방법이 바로 배열을 이용하는 것이다. 그래서 저장하고자하는 객체의 타입에 맞는 배열을 만들어서 쓰면 되는데
단점이 몇 개 있다. 생성 당시 배열의 길이(저장할 수 있는 객체의 수)가 정해지기에 초과되는 수의 객체가 들어오면 저장이 안된다.
또 객체를 삭제할 때, 해당 인덱스가 비게 되어 군데군데 비게되기때문에 새로운 객체를 저장하여면 어디가 비었는지 확인하는 코드가 필요하다.
이러한 단점을 보완하면서 자료구조를 바탕으로 객체들을 효율적으로 추가, 삭제, 검색 할 수 있도록 java.util 패키지에 
컬렉션과 관련된 인터페이스와 클래스들을 포함시켰다. 이것을 총칭해서 컬렉션프레임워크 라고한다. 
컬렉션은 사전적의미로 요소를 수집해서 저장하는 것을 말하는데, 자바컬렉션은 객체를 수집해서 저장하는 역할을 한다.

몇 가지 인터페이스를 통해서 다양한 컬렉션 클래스를 이용할 수 있다. 주요 인터페이스는 List / Set / Map  3가지이다.
이 인터페이스들은 컬렉션을 사용하는 방법을 정의한 것이다.

ArrayList / Vector / LinkedList 이 3개의 컬렉션클래스는 List 인터페이스의 구현클래스이다.
HashSet / TreeSet 이 2개의 컬렉션클래스는 Set 인터페이스의 구현클래스이다.
HashMap / Hashtable / TreeMap / Properties 이 4개의 컬렉션클래스는 Map 인터페이스의 구현클래스이다. 

3개의 주요인터페이스 중 List 와 Set 인터페이스는 공통점이 많아서 두 친구의 공통된 메소드들만을 모아 Collection 인터페이스로 정의해두고있다.
각 인터페이스마다 그것의 구현클래스들이 공유하는 메소드가 정의되어있다. 컬렉션에 어떤 타입의 객체가 저장될지모르니 제네릭타입을 이용한다.

List 인터페이스에 저장된 메소드들은 다음과같다. 얘네들은 이 인터페이스의 구현클래스(3개의 컬렉션)에서 모두 오버라이딩하고 있는것이다.
Set 인터페이스도 인덱스를 활용하지않아서 get() 대신에 iterator()를 쓴다는것 빼고는 아래와 거의 유사하다.
객체추가 : add(E)매개값객체를 맨끝에추가 / add(I,E)매개값인덱스에 객체를추가 / set(I,E)매개값인덱스에 이 객체로 대체
객체검색 : contains(E)이 객체가 포함되어있나요? / get(I)가져오기 / isEmpty()비어있냐? / size()객체 몇개저장되있음?
객체삭제 : clear()다없애 / remove(I)매개값인덱스의 객체를 삭제 / remove(E)이 객체를 삭제

다른객체여도 간헐적으로 같은 해시코드를 가질수있다. 그래서 둘이 같은확률이 99%긴하지만 1%를 위해 equals()로 한번더 같은지 검사하는 것이다.
Member 타입의 구슬들이 들어있는 구슬주머니 set 이다. 집합과같아서 순서가없고 중복이 없다.
Set 인터페이스는 List 와 유사하지만 다른것중하나가 인덱스라는것을 안쓴다는것이다. 그래서 for 문에서 get(i)호출하는식으로 못쓰고 대신에
반복문에서 iterator()를 호출해서 컬렉션내에 저장되어있던 객체들을 하나하나씩 꺼낼수있다.



Set 인터페이스의 구현클래스 중 대표적인 아이인 hashSet 은 마찬가지로 순서없이 저장하고 동일한 객체는 중복저장안한다.
동일한객체란 물리적보단 논리적으로 동일한지를 판단하는것인데, hashSet 은 객체를 저장하기 전에 2가지 과정을 거친다.
저장하고자하는 객체(받아온)의 hashCode()를 호출해서 해시코드를 얻는데, 이것이 기존에 저장되어있던 객체의 해시코드와 같은지 검사한다.
없다면 얘는 바로저장! 있다면 다른객체도해시코드같을수있기에 equals()로 다시한번 비교 후 다르면 바로저장! 같으면 얘 저장안함
언급된 두 메소드를 오버라이딩해서 논리적으로 같으면 같은해시코드를 리턴하고 true 를 리턴할 수 있도록 헤준다. 이것으로 보통 쓰인다.
String 클래스는 이미 두 메소드가 논리적에 맞게 메소드재정의되있어서 같은문자열이면 다 같은 객체(인스턴스)라고 하는것이다.



Map 컬렉션은 키와 값으로 구성된 Entry 객체를 저장하는 구조이다. 키와 값 모두 객체이다. 키는 중복저장이 안되지만 값은 가능하다.
기존 저장된 키와 동일한 키로 값을 저장하면, 기존값은 없어지고 새로운 값으로 대치된다. 키&값 한 덩어리를 Map.Entry 라고 칭한다.
Map 인터페이스의 메소드 :
put(K,V) / get(K)매개값키에 해당하는 값을 리턴 / size()저장된 키의 총 수 / keySet()모든 키를 Set 객체(구슬주머니)에 담기
containsKey() / containsValue() / entrySet()키와 값의 쌍으로 구성된 모든 Map.Entry 객체를 Set(구슬주머니)에 담아서 리턴
remove(K)
 */